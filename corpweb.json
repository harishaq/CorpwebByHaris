{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudFormation template for creating EC2 instances behind an Application ELB",
  "Parameters": {
    "InstanceType": {
      "Description": "Instance type for EC2 instances",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t2.micro", "t2.small"],
      "ConstraintDescription": "Must be a valid EC2 instance type (t2.micro or t2.small)"
    },
    "KeyPair": {
      "Description": "Server key pair name for EC2 instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "YourIp": {
      "Description": "Your public IP address in CIDR notation",
      "Type": "String",
      "Default": "0.0.0.0/0"
    }
  },
  "Resources": {
    "EngineeringVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": "10.0.0.0/18",
        "Tags": [{"Key": "Name", "Value": "EngineeringVpc"}]
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "EngineeringVpc"},
        "MapPublicIpOnLaunch": true,
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": {
          "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
        },
        "Tags": [{"Key": "Name", "Value": "PublicSubnet1"}]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "EngineeringVpc"},
        "MapPublicIpOnLaunch": true,
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
        },
        "Tags": [{"Key": "Name", "Value": "PublicSubnet2"}]
      }
    },  
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "EngineeringVpc"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "EngineeringVpc"}
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "PublicRouteTable"},
        "GatewayId": {"Ref": "InternetGateway"}
    },
    "DependsOn":["InternetGateway"]
  },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet1" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet2" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "WebserversSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group rules for webserver host.",
        "VpcId": {"Ref": "EngineeringVpc"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": {"Ref": "YourIp"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "Webserver": {
      "Type": "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType": {"Ref": "InstanceType"},
        "ImageId": "ami-07761f3ae34c4478d",
        "SubnetId": { "Ref": "PublicSubnet1" },
        "SecurityGroupIds": [
          { "Ref": "WebserversSG"}
        ],
        "Tags" : [
          { "Key": "Name",
            "Value": "webserver1"
          }
        ]
      }
    },
   
    "WebInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
          "AssumeRolePolicyDocument": {
              "Statement": [
                  {
                      "Action": [
                          "sts:AssumeRole"
                      ],
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "ec2.amazonaws.com"
                          ]
                      }
                  }
              ]
          },
          "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/AmazonS3FullAccess",
              "arn:aws:iam::aws:policy/AdministratorAccess"
          ]
      }
    },
    "WebInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          { "Ref": "WebInstanceRole" }
        ]
      }
    },
    "IamInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {"Ref": "WebInstanceRole"}
        ]
      }
    },    
    "WebInstance1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {"Ref": "InstanceType"},
        "ImageId": "ami-01cc34ab2709337aa",
        "KeyName": {"Ref": "KeyPair"},
        "SecurityGroupIds": [{"Ref": "WebserversSG"}],
        "SubnetId": {"Ref": "PublicSubnet1"},
        "IamInstanceProfile": { "Ref": "WebInstanceProfile" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y\n",
                "yum install -y git httpd php\n",
                "service httpd start\n",
                "chkconfig httpd on\n",
                "aws s3 cp s3://seis665-public/index.php /var/www/html/\n"
              ]
            ]
          }
        },
        "Tags": [{"Key": "Name", "Value": "web1"}]
      }
    },
    "WebInstance2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {"Ref": "InstanceType"},
        "ImageId": "ami-01cc34ab2709337aa",
        "KeyName": {"Ref": "KeyPair"},
        "SecurityGroupIds": [{"Ref": "WebserversSG"}],
        "SubnetId": {"Ref": "PublicSubnet2"},
        "IamInstanceProfile": { "Ref": "WebInstanceProfile" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y\n",
                "yum install -y git httpd php\n",
                "service httpd start\n",
                "chkconfig httpd on\n",
                "aws s3 cp s3://seis665-public/index.php /var/www/html/\n"
              ]
            ]
          }
        },
        "Tags": [{"Key": "Name", "Value": "web2"}]
      }
    },
    "EngineeringLB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "EngineeringLB",
        "Subnets": [
          {"Ref": "PublicSubnet1"},
          {"Ref": "PublicSubnet2"}
        ],
        "SecurityGroups": [{"Ref": "WebserversSG"}],
        "Scheme": "internet-facing",
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "60"
          }
        ],
        "Tags": [{"Key": "Name", "Value": "EngineeringLB"}]
      }
    },
    "EngineeringLBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "EngineeringWebservers",
        "Port": 80,
        "Protocol": "HTTP",
        "VpcId": {"Ref": "EngineeringVpc"},
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPort": "80",
        "HealthCheckPath": "/",
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 2,
        "Targets": [
          { "Id": { "Ref": "WebInstance1" }, "Port": 80 },
          { "Id": { "Ref": "WebInstance2" }, "Port": 80 }
        ]
      }
    },
    "EngineeringLBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {"Ref": "EngineeringLBTargetGroup"}
          }
        ],
        "LoadBalancerArn": {"Ref": "EngineeringLB"},
        "Port": 80,
        "Protocol": "HTTP"
      }
    }
  },
  "Outputs": {
    "LoadBalancerDNSName": {
      "Description": "DNS name of the load balancer",
      "Value": {"Fn::GetAtt": ["EngineeringLB", "DNSName"]}
    },
    "WebsiteUrl": {
      "Description": "URL of the web application",
      "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["EngineeringLB", "DNSName"]}]]}
    }
  }
}
